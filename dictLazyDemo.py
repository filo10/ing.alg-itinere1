from time import time
from dictLazyBST import DictLazyBST


def testLazy():
    # lista e listaP sono state create usando random.randint(0,9999)x1000volte e random.sample(lista, 250)
    # ho usato random per avere un test su un caso non particolare...
    # test per delete, search e alcuni casi di insert
    diz = DictLazyBST()

    lista = [6362, 8914, 9339, 2961, 1910, 4348, 7203, 5219, 4746, 9100, 3298, 107, 3032, 4896, 8771, 9598, 7590, 5344,
             1933, 3944, 7711, 662, 7581, 9836, 6598, 7356, 2892, 8962, 3993, 9452, 3959, 8264, 4079, 4972, 8800, 7522,
             1517, 2259, 4239, 7622, 7718, 64, 6578, 1459, 594, 5763, 1035, 5946, 4579, 284, 7335, 7505, 3724, 2000,
             8743, 1333, 3935, 2058, 6290, 4068, 8208, 6563, 2259, 7401, 1858, 4580, 3675, 8096, 4385, 6986, 7879, 9004,
             4949, 4198, 5176, 8351, 824, 9786, 2355, 5693, 5505, 6528, 5205, 5331, 8506, 4209, 3301, 1388, 1930, 1971,
             9317, 8853, 7328, 3041, 1938, 222, 8857, 9685, 1399, 7589, 4098, 5898, 9889, 4630, 3956, 6587, 295, 6237,
             2435, 4938, 1173, 7420, 7712, 1889, 6087, 4843, 2967, 7433, 3112, 847, 2121, 4377, 5676, 4240, 7360, 4812,
             2435, 666, 1912, 4328, 6650, 830, 2290, 5715, 1957, 4833, 4831, 7101, 9072, 462, 2165, 5854, 7245, 3996,
             8536, 9350, 3123, 3530, 1432, 3895, 5478, 8636, 7448, 6447, 9513, 1381, 5043, 4878, 3574, 3616, 6766, 9428,
             9724, 179, 3994, 4902, 9425, 3101, 5526, 9300, 3515, 8999, 2448, 1185, 9521, 3042, 5737, 311, 4554, 6517,
             7143, 8559, 94, 3157, 4037, 8649, 8631, 269, 41, 7589, 4433, 2024, 5237, 9661, 1050, 3298, 727, 1686, 9778,
             376, 4303, 8103, 8966, 9829, 401, 7967, 5385, 9471, 4146, 7422, 6377, 7589, 1688, 4766, 4694, 2628, 3901,
             23, 3187, 6992, 9107, 318, 2986, 1126, 1548, 9698, 7077, 5829, 3916, 5486, 4705, 137, 1060, 1781, 5811,
             2361, 542, 3191, 3308, 6198, 9674, 3937, 9697, 6596, 2613, 1346, 4016, 6756, 3127, 1303, 8305, 1283, 5533,
             5365, 3972, 519, 7425, 9286, 2118, 5042, 3814, 4478, 3257, 2191, 2551, 8407, 1144, 5054, 988, 4115, 8663,
             7069, 1702, 3197, 312, 9273, 6849, 6772, 6298, 8027, 8200, 8920, 7624, 4466, 3224, 9009, 3825, 7078, 9041,
             964, 4707, 8938, 9331, 6117, 3273, 6797, 8773, 1230, 1844, 4844, 7364, 1998, 5404, 3315, 8769, 6589, 6627,
             1232, 2952, 3454, 8081, 180, 4998, 2367, 4, 7352, 7509, 4857, 7581, 1320, 7972, 3705, 5400, 7642, 3711,
             2900, 848, 78, 8246, 7295, 3930, 9001, 9236, 347, 3575, 2603, 4167, 1007, 3409, 1609, 8334, 5724, 9543,
             6127, 8984, 4201, 3195, 3860, 323, 93, 4549, 6487, 3945, 9644, 7788, 4557, 3907, 1638, 6420, 3396, 6924,
             2758, 9666, 2051, 6150, 6249, 8427, 8819, 4785, 4122, 3343, 2095, 9186, 7534, 8867, 2285, 6044, 6040, 6583,
             4037, 3888, 3539, 6077, 5911, 81, 6282, 5546, 4170, 8030, 8077, 292, 5050, 2914, 2092, 9880, 8674, 1698,
             7108, 955, 2948, 2229, 6245, 1769, 2424, 4503, 6896, 3725, 6404, 5277, 7285, 15, 1017, 7375, 6907, 1276,
             6757, 5590, 467, 1611, 4663, 7818, 1002, 750, 3780, 7283, 733, 7943, 9720, 4494, 895, 228, 9248, 64, 8707,
             8572, 3898, 4290, 264, 9753, 2545, 9360, 3457, 3564, 1607, 6751, 5052, 861, 1970, 4160, 3059, 241, 669,
             8651, 3020, 9938, 2108, 54, 9025, 8860, 78, 9099, 2108, 3818, 6096, 4565, 2998, 8144, 502, 5447, 5231,
             7345, 3676, 752, 7436, 4142, 7144, 6792, 2022, 2589, 7531, 8011, 1098, 8082, 4229, 3028, 2289, 9191, 8462,
             4177, 541, 6699, 4420, 8978, 4834, 1741, 8307, 5481, 8723, 8655, 3997, 8302, 8639, 2053, 2544, 6433, 9970,
             1332, 5841, 5309, 1701, 4455, 2835, 7444, 6424, 5763, 1109, 1304, 1224, 9794, 4186, 5496, 9486, 4066, 6232,
             6158, 7974, 9123, 2582, 3874, 3663, 6020, 2556, 2928, 519, 9687, 6826, 180, 1180, 6024, 7779, 4502, 277,
             7417, 8414, 8628, 7659, 9948, 4268, 9835, 8229, 5894, 2995, 7436, 1095, 8216, 6956, 9379, 5724, 2646, 9476,
             4963, 3876, 5860, 7297, 80, 3931, 1554, 7118, 5015, 6132, 1725, 8046, 7222, 9286, 5854, 5378, 9449, 9926,
             1364, 6273, 5092, 4877, 3201, 1012, 8608, 9512, 6423, 3668, 6170, 60, 6073, 7231, 3525, 156, 404, 9877,
             5983, 7443, 5083, 2032, 7959, 8022, 5609, 7995, 9913, 7144, 733, 5560, 248, 5530, 8619, 3366, 2136, 6219,
             7951, 1402, 6390, 9082, 3970, 6324, 3896, 3696, 4833, 7504, 1294, 532, 9319, 4205, 5003, 2229, 9266, 4869,
             9526, 9527, 8313, 6096, 5462, 6133, 4798, 1469, 756, 7718, 4805, 8105, 2255, 2554, 5907, 8808, 7990, 5822,
             7895, 4977, 2659, 773, 8781, 9457, 7621, 2540, 9102, 4732, 1890, 203, 2952, 5476, 6359, 2048, 7930, 5996,
             6496, 8497, 7162, 3086, 4108, 3002, 6926, 9723, 7562, 4220, 3920, 8081, 6182, 7459, 9881, 4035, 1862, 8622,
             4190, 9654, 9984, 3634, 3247, 9841, 6413, 1458, 4302, 1046, 379, 9230, 812, 4086, 4651, 2037, 9430, 5139,
             9155, 2239, 2583, 8568, 9772, 5581, 4314, 4090, 2989, 6054, 4443, 5001, 4203, 8680, 6352, 8103, 8379, 5611,
             2521, 9549, 7160, 8830, 8558, 5272, 956, 8284, 3310, 9113, 3093, 17, 2848, 6225, 4600, 4091, 3742, 2327,
             3263, 860, 8507, 6424, 6394, 8340, 8833, 4191, 4895, 3261, 2035, 2367, 3543, 2550, 8604, 3488, 3435, 9577,
             9871, 7040, 7819, 5389, 657, 8225, 3065, 3176, 5527, 6063, 5723, 2014, 3863, 2958, 6141, 317, 1279, 2875,
             962, 3422, 5502, 3408, 5719, 3879, 6306, 6044, 6521, 589, 740, 4877, 1611, 5553, 4675, 5403, 1457, 2724,
             2230, 2422, 9897, 7880, 7648, 3201, 6209, 8110, 3880, 532, 8259, 9872, 2959, 4089, 9852, 1153, 5643, 1958,
             5295, 7738, 9561, 9033, 7664, 5265, 578, 1757, 9735, 9952, 6250, 4406, 6190, 3826, 8610, 4505, 6291, 3719,
             9154, 2479, 5421, 7256, 2173, 3873, 2285, 8510, 7156, 2104, 7584, 8682, 8698, 7521, 9991, 9192, 8611, 2220,
             2096, 3371, 1546, 4675, 3673, 7035, 6738, 1720, 7901, 1520, 708, 1488, 5050, 7029, 9878, 5077, 8104, 2468,
             2315, 1681, 2515, 4930, 6740, 9965, 8639, 3674, 6735, 5733, 8496, 6014, 8162, 3336, 9133, 1691, 2782, 6260,
             6473, 327, 70, 7667, 2378, 8916, 5240, 4208, 8541, 5981, 9684, 4208, 3727, 2045, 2540, 1874, 2436, 4324,
             5236, 1054, 8070, 9259, 6653, 1783, 6837, 1398, 2112, 6678, 7666, 9381, 1856, 5314, 1114, 6571, 1277, 5175,
             1986, 1009, 7439, 7822, 4339, 3858, 7412, 2603, 6282, 9830, 4485, 3318, 2922, 3879, 7651, 635, 8864, 9808,
             2485, 3915, 750, 7736, 577, 4813, 7967, 630, 5259, 9504, 1887, 1529, 8876, 7618, 3022, 5788, 6164, 7837,
             4032, 3543, 9252, 2879, 5736, 2016, 6162, 285, 1910, 9522, 7056, 4171, 9422, 8397, 4377, 6637, 9995, 5027,
             846, 6626, 6731, 4685, 4623, 4089, 1941, 2037, 4613, 832, 405, 8024, 7406, 102, 1955, 9785, 4984, 5503,
             7785, 440, 4273, 5809, 2118, 1252, 22, 3844]

    listaP = [4505, 7144, 9852, 7624, 6735, 7222, 6598, 5378, 8110, 1691, 6447, 5724, 327, 1364, 7995, 3261, 519, 8698,
              9991, 4675, 4949, 1912, 9191, 4895, 5894, 467, 4035, 594, 7622, 248, 9666, 2229, 9082, 1720, 9425, 4705,
              2550, 3673, 861, 5462, 1457, 9948, 1858, 317, 1050, 5421, 6924, 2435, 6020, 7959, 2173, 8414, 7711, 1402,
              2096, 5854, 1153, 3575, 6282, 6232, 5265, 107, 5092, 7406, 1095, 269, 541, 3457, 9685, 8307, 5763, 9897,
              7417, 5983, 4032, 8302, 4896, 9835, 3634, 4016, 3907, 7295, 5676, 3530, 5042, 6751, 9872, 2024, 6496,
              8743, 5476, 4385, 4613, 4623, 4549, 2583, 6517, 8707, 4600, 1910, 4239, 3696, 4466, 8568, 440, 860, 2479,
              812, 3937, 2016, 6992, 9877, 2108, 9878, 9836, 4798, 6792, 4877, 9881, 3195, 8216, 6896, 8225, 4091, 7967,
              4328, 7443, 5219, 7328, 9452, 2045, 2424, 8867, 1781, 5400, 5533, 5981, 9099, 6699, 5526, 4089, 6359,
              4557, 6096, 4977, 3616, 9248, 2108, 3818, 5027, 2603, 6225, 2967, 2058, 8081, 988, 9113, 5309, 9772, 5527,
              3719, 2255, 5788, 824, 4843, 3898, 9841, 292, 2104, 9984, 6127, 94, 8200, 8313, 4170, 9286, 4302, 5314,
              8011, 1346, 2121, 2914, 4171, 8920, 7078, 7356, 9952, 1971, 5898, 5530, 6044, 9001, 6096, 8305, 2361,
              4406, 7666, 3002, 3742, 318, 589, 8680, 9735, 1009, 4186, 1114, 8674, 2961, 8497, 6306, 4167, 295, 2835,
              4812, 4972, 2112, 3543, 7990, 750, 3032, 7029, 5829, 635, 6424, 5860, 1783, 6219, 3422, 9753, 3273, 8208,
              3028, 4037, 7360, 7785, 3127, 1012, 6413, 5050, 3674, 3915, 347, 3224, 5502, 4878, 4420, 6826, 2191, 6528,
              8682]

    lung = len(lista)  # 1000
    lungP = len(listaP)  # 250

    # test inserimento in albero senza cancellazioni
    start = time()
    for i in range(lung):
        diz.insert(lista[i], i)
    elapsed = (time() - start)*1000
    insertSenzaCanc = elapsed/lung
    print("\tTempo medio insert in albero senza canc.: \t\t\t%4.7f ms" % (elapsed / lung) + "\t(" + str(lung)+" prove)")
    diz.tree.stampa()

    # test search di elem. presenti
    start = time()
    for i in range(0, lung):
        diz.search(lista[i])
    elapsed = (time() - start)*1000
    searchPresent = elapsed/lung
    print("\tTempo medio search di elem. presenti: \t\t\t\t%4.7f ms" % (elapsed / lung) + "\t(" + str(lung) + " prove)")

    # test delete
    start = time()
    for i in range(lungP):
        diz.delete(listaP[i])
    elapsed = (time() - start)*1000
    delete = elapsed/lungP
    print("\tTempo medio delete: \t\t\t\t\t\t\t\t%4.7f ms" % (elapsed / lungP) + "\t(" + str(lungP) + " prove)")

    # test search elem. cancellati
    start = time()
    for i in range(lungP):
        diz.search(listaP[i])
    elapsed = (time() - start)*1000
    searchCanc = elapsed/lungP
    print("\tTempo medio search di elem. cancellati: \t\t\t%4.7f ms" % (elapsed / lungP) + "\t(" + str(lungP)+" prove)")

    # test insert con cancellazioni
    start = time()
    for i in range(55, lungP):
        diz.insert(listaP[i], 1001+i)
    elpsed = (time() - start)*1000
    insertConCanc = elapsed/(lungP-55)
    print("\tTempo medio insert con cancellaz.: \t\t\t\t\t%4.7f ms" % (elpsed/(lungP-55))+"\t("+str(lungP-55)+" prove)")

    # tempo search elem. non presenti
    start = time()
    for i in range(2000):
        diz.search(10000+i)
    elapsed = (time() - start)*1000
    searchNoExist = elapsed/2000
    print("\tTempo medio search di elem. non presenti: \t\t\t%4.7f ms" % (elapsed / 2000) + "\t(2000 prove)")

    ret = [insertSenzaCanc, searchPresent, delete, searchCanc, insertConCanc, searchNoExist]
    return ret


def creapeggiore(rad, max):
    # crea un albero binario con sottoalbero destro completo in tutti i livelli
    # l'albero prodotto sara' alto h=log(base2, max)+1
    diz = DictLazyBST()
    diz.insert(rad, 1)
    peg(diz, rad+1, max)
    # diz.tree.stampa()
    return diz


def peg(diz, min, max):
    # aiuta creapeggiore() a creare un albero completo in tutti i suoi livelli. ricorsiva
    new = (min+max)/2
    if min == max:
        diz.insert(min, min)
        return
    diz.insert(new, new)
    peg(diz, min, new-1)
    peg(diz, new+1, max)


def verotestpeg():
    # test caso peggiore di insert: il ramo piu' grande di un albero completo nei livelli e' interamente cancellato
    print "inizio costruzione albero perggiore alto 20. l'operazione puo' richiedere diversi minuti"
    diz = creapeggiore(1, 2**19)
    for i in range((2**19)+1):
        diz.delete(i)
    # calcolo il tempo medio inserendo nodi che possono essere messi come foglia ogni volta
    print "albero peggiore creato. inizio test insert. l'operazione puo' richiedere diversi minuti"
    total = 0
    for i in range(525000, 526000):
        start = time()
        diz.insert(i, i)
        elapsed = (time() - start)
        total = total + elapsed
        diz.delete(i)
    # diz.tree.stampa()
    print("\tTempo medio insert in ramo completamente cancellato: \t\t\t%4.7f ms" % total + "\t(1000 insert)")
    return total


def esperimento():
    # per testare ripetutamente i metodi
    # inserire indice in riga 189 per scegliere cosa testare
    # 0 = insert (in albero senza cancellazioni);  1 = search (elemento presente non cancellato);
    # 2 = delete; 3 = search (elemento cancellato); 4 = insert (in albero con alcuni elem. cancellati);
    # 5 = search (elementi non esistenti).
    tempo = 0
    for i in range(1000):
        x = testLazy()
        tempo = tempo + x[0]  # inserisci indice in x[ ]
        print 1000 - i
    print(tempo / 1000)


if __name__ == "__main__":
    # testLazy()
    # esperimento()
    verotestpeg()
